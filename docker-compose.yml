version: '3.8'

services:
  # üêò Base de datos del cat√°logo
  postgres-catalog:
    image: postgres:15-alpine
    container_name: postgres_catalog
    environment:
      POSTGRES_DB: ${POSTGRES_CATALOG_DB}
      POSTGRES_USER: ${POSTGRES_CATALOG_USER}
      POSTGRES_PASSWORD: ${POSTGRES_CATALOG_PASSWORD}
    ports:
      - "${POSTGRES_CATALOG_HOST_PORT}:5432"
    volumes:
      - catalog_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_CATALOG_USER} -d ${POSTGRES_CATALOG_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # üêò Base de datos del auth
  postgres-auth:
    image: postgres:15-alpine
    container_name: postgres_auth
    environment:
      POSTGRES_DB: ${POSTGRES_AUTH_DB}
      POSTGRES_USER: ${POSTGRES_AUTH_USER}
      POSTGRES_PASSWORD: ${POSTGRES_AUTH_PASSWORD}
    ports:
      - "${POSTGRES_AUTH_HOST_PORT}:5432"
    volumes:
      - auth_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_AUTH_USER} -d ${POSTGRES_AUTH_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # üêò Base de datos del carrito
  postgres-cart:
    image: postgres:15-alpine
    container_name: postgres_cart
    environment:
      POSTGRES_DB: ${POSTGRES_CART_DB}
      POSTGRES_USER: ${POSTGRES_CART_USER}
      POSTGRES_PASSWORD: ${POSTGRES_CART_PASSWORD}
    ports:
      - "${POSTGRES_CART_HOST_PORT}:5432"
    volumes:
      - cart_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_CART_USER} -d ${POSTGRES_CART_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # üß† Panel PGAdmin (opcional, para debug)
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      postgres-catalog:
        condition: service_healthy
      postgres-auth:
        condition: service_healthy
      postgres-cart:
        condition: service_healthy
    networks:
      - app-network

  # üõçÔ∏è Microservicio de cat√°logo
  catalog:
    build:
      context: ./services/catalog-service
      dockerfile: Dockerfile
    container_name: catalog_service
    environment:
      DATABASE_URL: ${CATALOG_DATABASE_URL}
      NODE_ENV: production
      PORT: ${CATALOG_PORT}
    ports:
      - "${CATALOG_PORT}:${CATALOG_PORT}"
    depends_on:
      postgres-catalog:
        condition: service_healthy
    networks:
      - app-network

  # üîê Microservicio de autenticaci√≥n
  auth:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: auth_service
    environment:
      DATABASE_URL: ${AUTH_DATABASE_URL}
      NODE_ENV: production
      PORT: ${AUTH_PORT}
    ports:
      - "${AUTH_PORT}:${AUTH_PORT}"
    depends_on:
      postgres-auth:
        condition: service_healthy
    networks:
      - app-network

  # üõí Microservicio de carrito
  cart:
    build:
      context: ./services/cart-service
      dockerfile: Dockerfile
    container_name: cart_service
    environment:
      DATABASE_URL: ${CART_DATABASE_URL}
      NODE_ENV: production
      PORT: ${CART_PORT}
    ports:
      - "${CART_PORT}:${CART_PORT}"
    depends_on:
      postgres-cart:
        condition: service_healthy
    networks:
      - app-network

# üß± Vol√∫menes para persistencia
volumes:
  catalog_data:
  auth_data:
  cart_data:

# üåê Red compartida entre servicios
networks:
  app-network:
    driver: bridge
